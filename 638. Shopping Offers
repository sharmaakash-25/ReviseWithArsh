class Solution {
public:
    map<vector<int>,int>mp;
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        if(mp.count(needs)!=0){
            return mp[needs];
        }
        int ans=0;
        for(int i=0;i<needs.size();i++){
            ans += (price[i]*needs[i]);
        }
        for(int i=0;i<special.size();i++){
            bool isvalid=true;
            for(int j=0;j<needs.size();j++){
                if(needs[j]<special[i][j]){
                    isvalid=false;
                }
            }
            if(isvalid){
                for(int j=0;j<needs.size();j++){
                    needs[j]-=special[i][j];
                }
                int ans2=special[i].back()+ shoppingOffers(price,special,needs);
                ans=min(ans,ans2);
                for(int j=0;j<needs.size();j++){
                    needs[j]+=special[i][j];
                }
            }
        }
        return mp[needs]=ans;
    }
};
//time complexity can be approximated as O(n * m^k), 
//where n is the number of items, m is the number of special offers, 
//and k is the maximum quantity of any item in the needs vector.

//SC:O(N)
